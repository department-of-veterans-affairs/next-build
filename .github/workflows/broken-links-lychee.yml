name: Broken link check (va.gov lychee)

on:
  # Manual trigger
  workflow_dispatch:
  # Schedule; currently once nightly, at 7:20 UTC.
  # schedule:
  #   - cron: '20 7 * * *'

env:
  SLACK_CHANNEL: C06DSBT7CBW

jobs:
  lychee-broken-links-check:
    name: Broken link check (lychee)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # Prevent overlapping runs and provide a single group key for cancellation
    concurrency:
      group: broken-links-scan-${{ github.ref }}
      cancel-in-progress: true

    # Centralized tuning for lychee concurrency and batch behavior.
    env:
      # lychee internal concurrency (recommended 4-8)
      LYCHEE_MAX_CONC: '8'
      # number of parallel lychee processes launched by the script
      BATCH_CONCURRENCY: '6'
      # timeout and retries for lychee (seconds / attempts)
      LYCHEE_TIMEOUT: '30'
      LYCHEE_RETRIES: '5'

    steps:
      - name: Check out repo
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Set up node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
        with:
          node-version-file: .nvmrc

      - name: Install Npm Dependencies
        run: |
          yarn set version 3.6.1
          HUSKY=0 yarn install --immutable

      - name: Build proxy-fetcher dist
        run: |
          yarn tsc -b ./packages/proxy-fetcher/tsconfig.json

      - name: Rebuild combined cert
        run: |
          yarn certs

      - name: Install rust and dependencies
        run: |
          curl -sSf 'https://sh.rustup.rs' | sh -s -- -y
          sudo apt install -y gcc pkg-config libc6-dev libssl-dev
          export PATH="$HOME/.cargo/bin:$PATH"
      - name: Install sitemap2urllist
        run: |
          cargo install sitemap2urllist
      - name: Install lychee
        run: |
          cargo install lychee
      - name: Download urls from sitemap
        run: |
          sitemap2urllist -c http://www.va.gov/sitemap_index.xml > ./urls.txt
      - name: Run lychee broken link check
        run: |
          # Run the lychee per-page scanner; outputs lychee-pages/ and combined json/csv in repo root.
          NODE_EXTRA_CA_CERTS=certs/VA-mozilla-combined.pem \
          node scripts/lychee-per-page-scan-and-merge.js \
          --lychee-chunk-size 600 \
          --batch-concurrency $BATCH_CONCURRENCY \
          --lychee-max-concurrency $LYCHEE_MAX_CONC \
          --lychee-timeout $LYCHEE_TIMEOUT \
          --lychee-retries $LYCHEE_RETRIES

      - name: Prepare reports
        run: |
          # Make filenames similar to existing pipeline
          if [ -f lychee-pages-combined.json ]; then
            mv lychee-pages-combined.json "broken-links-report-combined-run-${{github.run_id}}.json"
          fi
          if [ -f lychee-pages-combined.csv ]; then
            mv lychee-pages-combined.csv "broken-links-report-run-${{github.run_id}}.csv"
          fi

      - name: Upload combined JSON artifact
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        with:
          name: "broken-links-report-combined-run-${{github.run_id}}.json"
          path: broken-links-report-combined-run-${{github.run_id}}.json
          retention-days: 30

      - name: Upload combined CSV artifact
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        with:
          name: "broken-links-report-run-${{github.run_id}}.csv"
          path: broken-links-report-run-${{github.run_id}}.csv
          retention-days: 30

      # - name: Prepare Slack payload
        # run: |
        #   # Create a basic slack payload file similar to existing script expectations
        #   node scripts/broken-links-slack-payload.js -i broken-links-report-combined-run-${{github.run_id}}.json -c "$(echo 'TODO: artifact url in GH Actions')"

      # - name: Notify Slack
        # uses: department-of-veterans-affairs/platform-release-tools-actions/slack-notify@8c496a4b0c9158d18edcd9be8722ed0f79e8c5b4
        # continue-on-error: true
        # with:
        #   payload: "$(cat broken-links-slack-payload.json)"
        #   channel_id: ${{ env.SLACK_CHANNEL }}
        #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
